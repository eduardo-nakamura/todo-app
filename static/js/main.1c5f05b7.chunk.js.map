{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filterTodos","console","log","key","App","useState","status","setFilterTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","href","width","height","src","frameborder","allow","allowfullscreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c5f05b7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = ({setInputText, todos, setTodos, inputText, setStatus}) => {\r\n    const inputTextHandler = (e) => {\r\n      \r\n      setInputText(e.target.value)\r\n    }\r\n    const submitTodoHandler = (e) => {\r\n      e.preventDefault();\r\n      setTodos([\r\n        ...todos, \r\n        {text: inputText, completed: false, id: Math.random() * 1000}\r\n      ]);\r\n      setInputText(\"\")\r\n    };\r\n    //filtro\r\n    const statusHandler =(e) =>{\r\n      setStatus(e.target.value)\r\n    }\r\n    return (\r\n      <form>\r\n        \r\n          <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n          <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n            <i className=\"fas fa-plus-square\"></i>\r\n          </button>\r\n          <div className=\"select\">\r\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n        \r\n        </div>\r\n       \r\n        \r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst Todo = ({text,todo,todos,setTodos}) => {\r\n    const deleteHandler = () =>{\r\n        setTodos(todos.filter((el) => el.id !== todo.id))\r\n       \r\n    }\r\n    const completeHandler = () =>{\r\n        setTodos(todos.map(item => {\r\n            if(item.id === todo.id){\r\n                return {\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n       \r\n    }\r\n\r\n    return(\r\n        <div className=\"todo\" >\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>\r\n                {text}\r\n            </li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo","import React from 'react'\r\nimport Todo from './Todo'\r\nconst TodoList = ({ todos,setTodos,filterTodos }) =>{\r\n    console.log(filterTodos)\r\n    console.log(todos)\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filterTodos.map(todo => (\r\n                    <Todo setTodos={setTodos} todos={todos}  key={todo.id} todo={todo} text={todo.text}/>\r\n                ))}\r\n            </ul>\r\n        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList","import React, { useState, useEffect } from 'react'\n\nimport './App.css';\nimport Form from \"./components/Form\"\nimport TodoList from \"./components/TodoList\"\nfunction App() {\n  const [inputText, setInputText] = useState(\"\")  \n  const [todos, setTodos] = useState([])//todos  \n  const [status,setStatus] = useState(\"all\")//Status filtro\n  const [filterTodos, setFilterTodos] = useState([])//filtro\n\n  // on init\n  useEffect(() => {    \n    getLocalTodos()\n  },[])\n\n  // quando usa filtro\n  useEffect(() => {\n    filterHandler()\n    saveLocalTodos()\n  },[todos, status])\n\n  const filterHandler = () =>{\n    switch(status){\n      case 'completed':\n        setFilterTodos(todos.filter(todo => todo.completed === true))\n        break;\n      case 'uncompleted':\n        setFilterTodos(todos.filter(todo => todo.completed === false))\n        break;\n      default:\n        setFilterTodos(todos)\n    }\n  }\n  // save localsotrage\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]))\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem('todos'))\n      setTodos(todoLocal)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h2>Ed's Todo List</h2>\n      </header>\n      <Form \n        inputText={inputText} \n        todos={todos} \n        setTodos={setTodos} \n        setInputText={setInputText}\n        setStatus={setStatus}\n        \n      />\n      <TodoList setTodos={setTodos} todos={todos} filterTodos={filterTodos} />\n\n      <footer className=\"footer\">\n        \n        <h4>Tutorial by <a href=\"https://www.youtube.com/watch?v=pCA4qpQDZD8\">Dev Ed</a></h4>\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pCA4qpQDZD8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n      </footer>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}